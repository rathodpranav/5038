{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "efea2252-06ae-4abf-aba9-94a5c7088250",
   "metadata": {},
   "source": [
    "# 1. Check if the number is odd or even "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6563a299-9faf-4bc0-9499-39f91d5f09c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. The number 7 is Odd\n"
     ]
    }
   ],
   "source": [
    "def is_even(number):\n",
    "    # If the number is divisible by 2, it is even\n",
    "    if number % 2 == 0:\n",
    "        return \"Even\"\n",
    "    else:\n",
    "        return \"Odd\"\n",
    "\n",
    "# Example\n",
    "print(\"1. The number 7 is\",is_even(7))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34321f72-bcf6-403c-82ae-ae5da7b738e1",
   "metadata": {},
   "source": [
    "# 2.Count total number of digits in a number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0e0a8b34-9a88-487d-84e3-a112b51fc2c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2. Number of digits in 12345: 5\n"
     ]
    }
   ],
   "source": [
    "def count_digits(number):\n",
    "    # Use absolute value to ignore negative sign, convert to string and count length\n",
    "    return len(str(abs(number)))\n",
    "\n",
    "#Example\n",
    "print(\"2. Number of digits in 12345:\",\n",
    "count_digits(12345))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64cbf5bb-d57c-46cc-b4ca-9c67efb22268",
   "metadata": {},
   "source": [
    "# 3. Print the reverse number pattern using for loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "10cf7aff-d503-4f27-aa6c-56193f004665",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3. Reverse Number Pattern:\n",
      "6 5 4 3 2 1 \n",
      "5 4 3 2 1 \n",
      "4 3 2 1 \n",
      "3 2 1 \n",
      "2 1 \n",
      "1 \n"
     ]
    }
   ],
   "source": [
    "def reverse_pattern(n):\n",
    "    #Outer  loop for rows\n",
    "    for i in range(n, 0, -1):\n",
    "        #Inner loop for printing numbers in each row\n",
    "        for j in range(i, 0, -1):\n",
    "            print(j, end=' ')\n",
    "        print() # Move to next line after each row\n",
    "#Example\n",
    "print(\"3. Reverse Number Pattern:\")\n",
    "reverse_pattern(6)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c60b8cf8-7360-4eab-b64d-eeb2222a550d",
   "metadata": {},
   "source": [
    "# 4.Print all prime numbers within a range "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4a8774d8-5ba0-422f-a55f-9e71662d3dcf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4. Prime numbers:\n",
      "Prime numbers between (start) and 40:\n",
      "11 13 17 19 23 29 31 37 \n"
     ]
    }
   ],
   "source": [
    "def print_primes(start, end):\n",
    "    print(f\"Prime numbers between (start) and {end}:\")\n",
    "    for num in range(start, end + 1):\n",
    "        if num > 1: # 0 and 1 are not prime\n",
    "            for i in range(2, int(num**0.6) + 1):\n",
    "                if num % i == 0:\n",
    "                    break\n",
    "            else:\n",
    "                print(num, end=' ')\n",
    "    print() #New line\n",
    "\n",
    "#Example\n",
    "print(\"4. Prime numbers:\")\n",
    "print_primes(10, 40)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8246dfa0-9a95-406a-82fd-3285cdf90a94",
   "metadata": {},
   "source": [
    "# 5. Find the factorial of a number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "36f6a94d-597b-48b0-8c82-486138ccd0c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5. Factorial of 6: 720\n"
     ]
    }
   ],
   "source": [
    "def factorial(n):\n",
    "    result = 1\n",
    "    for i in range(2, n + 1):\n",
    "        result *= i #Multiply result by i\n",
    "    return result\n",
    "#Example\n",
    "print(\"5. Factorial of 6:\", factorial(6))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a5282bf-821b-4c7a-8050-6a07d3c472c0",
   "metadata": {},
   "source": [
    "# 6.Check if a number is palindrome"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0a43a677-d8c2-47ad-88e9-d74c3b1ccda1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6. is 123321 a palindrome? True\n"
     ]
    }
   ],
   "source": [
    "def is_palindrome(number):\n",
    "    # Convert number to string and check if reversed equals original\n",
    "    return str(number) == str(number)[::-1]\n",
    "\n",
    "# Example\n",
    "print(\"6. is 123321 a palindrome?\",\n",
    "is_palindrome(123321))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8afb52b-4c78-4dbf-abc7-dd2efeb65926",
   "metadata": {},
   "source": [
    "# 7. Check if number is armstrong"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c6716c0d-fdc5-4ff2-876a-d63650fa5fdd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7. is 153 an Armstrong number? True\n"
     ]
    }
   ],
   "source": [
    "def is_armstrong(number):\n",
    "    digits = str(number)\n",
    "    power = len(digits) # Number of digits\n",
    "    total = sum(int(d)**power for d in digits)  # sum of digits raised to power\n",
    "    return number == total\n",
    "\n",
    "# Example\n",
    "print(\"7. is 153 an Armstrong number?\",\n",
    "is_armstrong(153))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "499458ce-0509-4778-a9f3-03b9b2f5da82",
   "metadata": {},
   "source": [
    "# 8. Find the Maximum of Three Numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f87ee992-54fd-49c4-9525-2f76eda5b820",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8. Maximum of (20, 90, 555): 555\n"
     ]
    }
   ],
   "source": [
    "def max_of_three(a, b, c):\n",
    "    return max(a, b, c) # use built in max function\n",
    "# Example \n",
    "print(\"8. Maximum of (20, 90, 555):\",\n",
    "max_of_three(20, 90, 555))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41b419d7-0ffa-42f1-9cbd-f9987c3e087b",
   "metadata": {},
   "source": [
    "# 9. Find the sum of digits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "587b4e0e-fb16-4d54-848a-9921ee57eac1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9. Sum of digits in 98765: 35\n"
     ]
    }
   ],
   "source": [
    "def sum_of_digits(number):\n",
    "    return sum(int(d) for d in\n",
    "str(abs(number)))  # Add all digits\n",
    "\n",
    "#Example\n",
    "print(\"9. Sum of digits in 98765:\",\n",
    "sum_of_digits(98765))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb233c7a-bc38-453c-9007-3b7a707154ca",
   "metadata": {},
   "source": [
    "# 10. Natural Numbers Summation Pattern"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8734c396-c248-4517-9403-eae6525f7ed4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10. Natural Numbers Summation Pattern for n=8:\n",
      "1 = 1\n",
      "1 + 2 = 3\n",
      "1 + 2 + 3 = 6\n",
      "1 + 2 + 3 + 4 = 10\n",
      "1 + 2 + 3 + 4 + 5 = 15\n",
      "1 + 2 + 3 + 4 + 5 + 6 = 21\n",
      "1 + 2 + 3 + 4 + 5 + 6 + 7 = 28\n",
      "1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 36\n"
     ]
    }
   ],
   "source": [
    "def natural_sum_pattern(n):\n",
    "    total = 0\n",
    "    for i in range(1, n + 1):\n",
    "        total += i  # Keep running total\n",
    "        # Print the pattern: 1 + 2 + .... + i = total\n",
    "        print(\" + \".join(map(str, range(1, i + 1))), '=', total)\n",
    "\n",
    "# Example\n",
    "print(\"10. Natural Numbers Summation Pattern for n=8:\")\n",
    "natural_sum_pattern(8)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
